openapi: 3.0.0
info:
  title: Appointy 統一認証API
  version: 2.0.0
  description: 統一ユーザー認証システム（ユーザー + 任意店舗運営）に関するAPI仕様

servers:
  - url: /api/auth
    description: 認証API

paths:
  /login:
    post:
      summary: ユーザーログイン
      description: ユーザーがメールアドレスとパスワードでログインする（統一認証）
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        200:
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 550e8400-e29b-41d4-a716-446655440000
                      name:
                        type: string
                        example: 田中太郎
                      email:
                        type: string
                        example: user@example.com
                      hasStore:
                        type: boolean
                        description: 店舗を所有しているかどうか
                        example: true
                      store:
                        type: object
                        nullable: true
                        description: 店舗情報（hasStoreがtrueの場合）
                        properties:
                          id:
                            type: string
                            example: store-123
                          storeName:
                            type: string
                            example: 田中カウンセリングルーム
                          description:
                            type: string
                            example: 心理カウンセリングを行っています
                          profileImageUrl:
                            type: string
                            nullable: true
                            example: https://example.com/image.jpg
          headers:
            Set-Cookie:
              schema:
                type: string
                example: auth-token=xxx; HttpOnly; Secure; SameSite=Strict
        401:
          description: 認証失敗
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /register:
    post:
      summary: ユーザー新規登録
      description: 新規ユーザーアカウントを作成する（統一登録）
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: 田中太郎
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: password123
      responses:
        201:
          description: 登録成功（自動ログイン）
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 550e8400-e29b-41d4-a716-446655440000
                      name:
                        type: string
                        example: 田中太郎
                      email:
                        type: string
                        example: user@example.com
                      hasStore:
                        type: boolean
                        example: false
                      store:
                        type: object
                        nullable: true
                        example: null
          headers:
            Set-Cookie:
              schema:
                type: string
                example: auth-token=xxx; HttpOnly; Secure; SameSite=Strict
        400:
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        409:
          description: メールアドレス重複
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /me:
    get:
      summary: 認証ユーザー情報取得
      description: 現在ログイン中のユーザー情報を取得する
      security:
        - cookieAuth: []
      responses:
        200:
          description: ユーザー情報取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 550e8400-e29b-41d4-a716-446655440000
                  name:
                    type: string
                    example: 田中太郎
                  email:
                    type: string
                    example: user@example.com
                  hasStore:
                    type: boolean
                    description: 店舗を所有しているかどうか
                    example: true
                  store:
                    type: object
                    nullable: true
                    description: 店舗情報（hasStoreがtrueの場合）
                    properties:
                      id:
                        type: string
                        example: store-123
                      storeName:
                        type: string
                        example: 田中カウンセリングルーム
                      description:
                        type: string
                        example: 心理カウンセリングを行っています
                      profileImageUrl:
                        type: string
                        nullable: true
                        example: https://example.com/image.jpg
        401:
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logout:
    post:
      summary: ログアウト
      description: ユーザーをログアウトしてセッションを削除する
      security:
        - cookieAuth: []
      responses:
        200:
          description: ログアウト成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ログアウトしました
          headers:
            Set-Cookie:
              schema:
                type: string
                example: auth-token=; HttpOnly; Secure; SameSite=Strict; Max-Age=0
        401:
          description: 認証エラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        statusMessage:
          type: string
          example: エラーメッセージ
        data:
          type: object
          description: 追加のエラー情報（バリデーションエラーなど）

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: auth-token
      description: HTTPOnlyクッキーによる認証